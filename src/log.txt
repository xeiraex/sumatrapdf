A daily log of changes and commentary. An experiment of sorts.

2021-07-10 Sat

- fix CodeQL issues
- implement Utf8ToWcharBuf() and WstrToUtf8Buf() and StackUtf8ToWstr
- implement Utf8ToWstrV, Utf8ToWstr, WstrToCodePageV, WstrToUtf8V, WstrToCodePage, WstrToUtf8
  also re-implement TempToUtf8 and TempToWstr
- remove StackWstrToUtf8 and StackUtf8ToWstr
- remove Utf8ToWcharBuf
- remove WstrToUtf8Buf
- rename WstrToCodePage => WstrToCodePageV
- rename ToMultiByte => ToMultiByteV
- change TextRenderMethod to enum class
- rename WstrToAnsi => WstrToAnsiV and UnknownToUtf8 => UnknownToUtf8V
- change GetZoneIdentifier, SetZoneIdentifier and DeleteZoneIdentifier from WCHAR* to char*
- replace strconv::WstrToUtf8 with TempToUtf8 and strconv::Utf8ToWstr with TempToWstr
- properly remove trailing separator menu item

2021-07-09 Fri

- change DefaultPasswords to use char* instead of WCHAR*; add support for Utf8StringArray settings type
- change ReopenOnce to use char* instead of WCHAR*; add support for Utf8StringArray settings type
- remove support for no longer needed StringArray settings type
- fix version comparison regression in ShowAutoUpdateDialog (fixes #2015)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/2015
- fix regression crash when selecting annotation under cursor (fixes #2016)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/2016
- implement TempToUtf8 and TempStrDup
- tweak PoolAllocator
- fix debug crash when opening epub file (fixes #2018)
  kind of expected regression from menu refactor. In refactor lost ability
  to ensure we never have trailing separator at the end.
  Fixed by adding code to remove trailing separator if we happen to add one
  https://github.com/sumatrapdfreader/sumatrapdf/issues/2018
- save scroll position in settings as float, not int (fixes #2017)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/2017
  Regression from https://github.com/sumatrapdfreader/sumatrapdf/issues/1752
  where I changed scroll position from int to float but didn't change
  the serialization as int

2021-07-08 Thu

- allow MenuDef to be recursive
- make menus more declarative
- replace MF_NO_TRANSLATE with a list of ids
- replace MF_REQ_INET_ACCESS with a list of ids
- replace MF_REQ_FULLSCREEN with a list of ids
- replace MF_REQ_PREF_ACCESS and MF_REQ_PRINTER_ACCESS with a list of ids
- replace MF_NEEDS_SELECTION with  a list of ids
- replace MF_NEEDS_ANNOT_UNDER_CURSOR and MF_NEEDS_CURSOR_ON_PAGE with a list of ids
- replace MF_NEEDS_ANNOTS with a list of ids
- replace MF_CBX_ONLY and MF_REQ_ALLOW_COPY with a list of ids
- replace MF_REQ_DISK_ACCESS with a list of ids
- replace MF_NOT_FOR_CHM and MF_NOT_FOR_EBOOK_UI with a list of ids
- remove no longer used MenuDef.flags
- convert main menu to MenuDef
- match file in history by name to handle files moved (fixes #14)
- change ebookUI.FontName to be chear* instead of WCHAR*
- change ExternalViewer to use char* instead of WCHAR*
- change AssociatedExtensions and VersionToSkip to use char* instead of WCHAR*

2021-07-07 Wed

- remove .vbkm support
- remove sorting toc items
- remove ramicro code
- add selection search / translation with Google, Bing and DeepL (for #1280)
- add top level Selection menu (same as context menu) (for #1280)
- convert enum Perm_* to enum class Perm
- code cleanup: remove unnecessary DisplayState typedef

2021-07-06 Tue

- don't ask to save unsaved annotations in stress testing
- sign when building locally
- make 3.3 release
- update mupdf
- update harfbuzz
- update lcms2
- update openjpeg
- simplify cmd-line arg parsing
- rename CClassFactory => FilterClassFactory / PreviewClassFactory
- fix DjVu rotation (fixes #1593)
  must process the file before setting rotation
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1593
- renaming class CFoo => Foo 

2021-06-29 Tue

- simplify GetPaperFormat()

2021-06-26 Sat

- fix inter-links to files like "foo.pdf#page=1" (fixes #1821)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1821
  must have been regression from mupdf update where they changed
  how they encode PDF destination info

2021-06-22 Tue

- don't hide 'Select Annotation In Editor`, just disable (for #2002)

2021-06-20 Sun

- fix restoring exact scroll position on reload (fixes #1752)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1752
  probably introduced when I did refactor of geometric structs like Point/PointF
  missed the ones generated by settings structs
- persist show/hde scrollbar state across launches (fixes #1720)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1720
  only had to unmark the setting as internal
- improve next / prev page with left / right flick (fixes #9)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/9

2021-06-19 Sat

- annotation color fixes
- position context menu triggered via Shift-F10 under mouse cursor (fixes #1689)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1689
- fix MkPdfColorFromFloat() (fixes color of newly created caret etc. annotation)

- use pdf_update_annot instead of pdf_update_appearance
- don't show annotation-related context menu items on non-pdf documents (fixes #1993)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1993
- split `Create Annotation` context menu and fix #1992
  split `Create Annotation` into `Create Annotation From Selection` and
  `Create Annotation Under Cursor`.
  When using `Edit Annotations` menu, select annotation under cursor (fixes #1992).
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1992
- in annotations editor, add explicit button for saving to a new PDF instead of ctrl modifier
- make default annotation color yellow (0xffffff00) so it matches value in gColorsValues
- add context menu�Select annotation�when cursor over annotation and edit annotation window is visible (replaces�Edit annotations�menu) (for #1992)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1992
- fix DefaultAppearanceTextColor() (for #1974)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1974
- properly handle translparent color (fixes #1974)
  add _TRU() and trans::GetTranslationUtf8() to get translation as utf8
  use "Background Color" instead of "Color" for Free Text annotation
  win => ew renaming for EditAnnotationsWindow
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1974
- recognize _TRU() as translation marker; add new strings for translation
- show error when saving annotations fail; properly set incremental saving flag (fixes #1723)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1723
- reflect changes to annotations immediately (fixes #1977)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1977
- improve confirmation dialog for saving annotations on close (fixes #1991)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1991

2021-06-18 Fri

- hide unused annotation methods
- simplify struct Annotation
- use less memory during crash processing (ran out of memory on GitHub CI)
- fix use of Annotations.HighlightColor
- rename UnpackRgb/UnpackRgba to UnpackColor
- rename MkRgb/MkRgba to MkColor

2021-06-17 Thu

- refactor Annotation: convert methods into functions
- enable annotations in all builds
- when annotation editor window was shown, 'a' wouldn't add annotation to the list
- don't crash after saving annotations

2021-06-13 Sun

- Split EnginePdfImpl.h from EnginePdf.cpp

2021-06-12 Sat

- Prototyping a different way to handle annotations.

2021-06-11 Fri

- looking into AltDrag issue

2021-06-10 Thu

- update mupdf / mujs

2021-06-09 Wed

- after processing crsahes, deploy to netlify

2021-06-08 Tue

- improving code to preview crashes

2021-06-07 Mon

- don't pre-populate annotation content when creating it from text
  mupdf does that but not sure if that was the right behavior
- using 'a' to create a highlight annotation doesn't open annotation editor (for #1959)
  use shift+a to also open annotation editor
- use RtlCaptureStackBackTrace in mem leak detector
- use Annotations.HighlightColor with 'a'

2021-06-06 Sun

- ask to save annotations when closing a window (fixes #1962)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1962
- show that a document has unsaved annotations in the toolbar (fixes #1973)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1973

2021-06-05 Sat

- fixed https://github.com/sumatrapdfreader/sumatrapdf/issues/1970
  a crash when pressing 'q' on empty window. a regression from
  recent change.
  lesson: more testing even when making seemingly simple changes
- updates keyboard shortcuts docs, formatted .html files with prettier
  (will be easier to review diffs after notion import in the future).
- optimized TocItem::ChildAt() for https://github.com/sumatrapdfreader/sumatrapdf/issues/1795#issuecomment-855295881
  this document is somewhat of an edge case in that it has toc items with
  lots of children and ChildAt(n) would always traverse from first child,
  creating a quadratic time complexity.
  still not fast enough for this particular document but at least now
  the time is spent fully in windows TreeCtrl code.
- website: make display of keyboard shortcut in manual.html look closer to docs/Keyboard-shortcuts.html
- speedup PopulateTreeItem (fixes #1795)
  https://github.com/sumatrapdfreader/sumatrapdf/issues/1795
  the trick was to insert children in reverse order, as per
  https://devblogs.microsoft.com/oldnewthing/20111125-00/?p=9033
- speed up TreeCtrl::GetTreeItemByHandle()
- speed up TreeCtrl::GetHandleByTreeItem() by storing handle in TreeItem
- website: fix broken links
- possibly speed up Vec::EnsureCap()
- disable TocEditor, New Bookmarks etc.

2021-06-04 Fri

- update mupdf

2021-06-01 Tue

- update mupdf

2021-05-31 Mon

- randomize viewing state during stress test

2021-05-30 Sun

- always enable opening text files
  previously we would only open .txt files if advanced setting
  "open ebooks with mupdf engine" was true.
- replace NotificationGroupId with Kind
- convert enum NotificationOptions to enum class

2021-05-29 Sat

- Refactor StressTest: convert most method to functions.
- Remove ImgFormat because it's redundant with kindFile*
- Tweak detection of clang-format.exe and msbuild.exe so that
 we consistently start with 2019 Preview.
- stress testing: limit number of rendered pages per file to 32 randomly
  picked pages. This speeds up stress testing by avoiding rendering really
  big documents. 

2021-05-28 Fri

- In 3.2 I introduced a regression: when user changed pages I tried to sync
  the treeview selection to match the current page. In 3.1.2 we would limit
  auto-select to currently expanded items. In 3.2 we would auto-expand
  tree item to make selected tree item visible.
  Fixed it in https://github.com/sumatrapdfreader/sumatrapdf/commit/4960ce53950bd9d50500c4141b41b7d4839dc767

The TreeCtrl / TreeModel still has problems.

1. To make things efficient TreeItem shouldn't be a class but an
opaque pointer-sized handle and it's items should belong to
TreeModel. This would allow us to potentially optimize how we store
information. Currently we have to create TreeItem object for
every node.

2. Changes to TreeCtrl are not reflected in TreeModel. Maybe
they shouldn't but then we should be more clear about it
in the code.

---

Folded premake5.opt.lua into premake5.lua. When changing flags
in premake5.lua I would always forget to update premake5.opt.lue
Now relevant projects are close together and in the same file
so maybe less mistakes in the future.

---

On a treemodel branch, redid TreeModel interface, by folding TreeItem
methods into it. This is to open possibility for more efficient implementation
of TreeModel. Even now the code should be a bit smaller by removing methods
from what were TreeItem subclasses.

---

Links to /settings3.3.html and /settings/settings3.3.html were broken because
Cloudflare Pages doesn't handle HTML files with '.' in the name.
Had to change naming scheme to /settings/settings3-3.html

---

Fixed Notion HTML generation to not generate files with '.' in them.

2021-05-27 Thu

Added support for .xps files with jpeg-xr images in them.
mupdf has code that uses open-source jpeg-xr library but we used
to have decoder that used Windows built-in codec. This got lost
during the big mupdf merge.
I resurrected this code and tweak it a bit.
https://github.com/sumatrapdfreader/sumatrapdf/commit/0d5ae4e28120fe563970ef66c1e92f2cc6bfa113
https://github.com/sumatrapdfreader/sumatrapdf/commit/b16fda12776c223a901efee2afdacbd953671df0

Fixed building on GitHub Actions caused by msbuild changes in
Visual Studio 2019 Preview.
In the past "msbuild /t:test_util" worked just fine.
In latest it has to be "msbuild /t:test_util:Rebuild".
No idea why ":Rebuild" (also tried just ":Build" but it didn't work).

https://github.com/sumatrapdfreader/sumatrapdf/commit/2fa0bcfce3947a5af5f80d16d92ded81b04eef1f
https://github.com/sumatrapdfreader/sumatrapdf/commit/348d27f942a71534e769536d1849c9ca6f58dcf3

2021-01-02 Sat

- more work on MinHook.[h|cpp] and MemLeakDetect.[h|cpp]

2021-01-01 Fri

- start on MinHook.[h|cpp] to be used for mem leak detection

2020-08-17 Mon

- fix https://github.com/sumatrapdfreader/sumatrapdf/issues/1733
- handle click in favorites tree (fixes #1733)

2020-08-16 Sun

- fix https://github.com/sumatrapdfreader/sumatrapdf/issues/1716
- change TabState::filePath to char*
- disable creation of annotation that cannot be fully edited

2020-08-15 Sat

- fixed https://github.com/sumatrapdfreader/sumatrapdf/issues/1730
- annotations: don't change page position when annotation is created
- updated mupdf to latest version

2020-07-26 Sun

- Started on converting tab code into TabCtrl.
  Luckily can do it step-by-step.
- refactoring old code. Changed some settings from wstr to str.
  change DisplayMode to enum class.

2020-07-25 Sat

ixed https://github.com/sumatrapdfreader/sumatrapdf/issues/1286
'i' would show page number only temporarily (persistently with SHIFT)
and only in full screen.
Make it work always and toggle the info.
It could be improved (no close button, don't dismiss with ESC like
other notification windows, no flickering of notification window).

fixed https://github.com/sumatrapdfreader/sumatrapdf/issues/1711
(and https://github.com/sumatrapdfreader/sumatrapdf/issues/1454 most likely).
When the cache of rendered pages is full, we free a page. If we happened to
free a page from the document in the current tab, it would lead to free / re-rerender
cycle and flickering.
The fix is to make sure we only free from other tabs.
Not perfect (if it's a visible tab in a different window, we'll probably flicker).
The right approach would be to make the cache expand in FreeIfFull()
if we can't find invisible page to drop (e.g. by using linked list
to store cache entries or by having e.g. 256 over-flow entries).

fixed https://github.com/sumatrapdfreader/sumatrapdf/issues/1712
Lots of debugging but the root cause was simple: notifications window
is a child of canvas window. it was flickering because a paint of
canvas would paint over notification window.
Fixed by telling canvas window to clip children.
We should make it more flexible and more efficient to add stuff to be
drawn on canvas.

2020-07-10 Fri

handle pdf_annot_author() throwing (fixes #1673)

don't crash when trying to restore deleted file (fixes #1674)
it was a regression from the fix for saving preferences.
probably not the best fix, should fix the fact that prefs::Save()
deletes gGlobalPrefs->sessionData while 're iterating on it

- limit which annotations can be moved
- refactor dragging logic a bit
- make ESC cancel dragging of an annotation
- show rect of selected annotation in annotation editor

2020-07-09 Thu

- fix regression of not copying rectangular selection as image (fixes #1668)
- write DisplayModel::GetAnnotationAtPos(Point) and EngineGetAnnotationAtPos(Engine, Point)
- update annotation rect after it's moved

2020-07-08 Wed

Parallelized doit -clang-format. Go concurrency is a joy.

implement EnginePdfHasUnsavedAnnotations() and bug-fix detection
of when to show 'Save PDF' button in annotations editor.

update mupdf.
this was a big one because mupdf switched to using gumbo
as html/xml parser.

- tweak premake definitions
- ask to save unsaved annotation when closing a pdf file

2020-07-07 Tue

Added creation of highlight, squiggly, strikeout and underline
annotations.

Replaced EnginePdf::IsLinearizedFile() with mupdf's pdf_doc_was_linearized.
It didn't exist when IsLinearizedFile() was written.
Removing code feels good.

2020-07-06 Mon

Fixed a bunch of issues related to bugs in freetype and not
compiling Sumatra with the exact same freetype options as mupdf.
Introduced when I updated freetype code.

Removed .smx support. It's a lot of work to add support for all
PDF annotations (for each annotation type need to write code
to serialize it, de-serialize it, draw the annotation for
each engine type).
It's also sumatra-only and I suppose the majority of people
just want PDF annotations.
Might resurrect if there's a lot of requests for it.

2020-07-05 Sun

Link to the commit on pre-release and daily build pages.

Fixed a long-standing issue of loosing list of opened files
if Sumatra crashes or get killed by Windows (e.g. due to restart).
Took so long to fix becaue I believed the code is correct.
Turns out prefs::Save() was haphzardly used. It's still
not great but at least this specific error is fixed.
To be even more robust we should periodically (every 5 min?)
call prefs::Save(). We only do it after opening and closing a file,
which means that if we scroll etc., we'll loose this info.

Coding style refactorings: change enum SettingType to enum class,
change SerializeStruct() and SerializeGlobalPrefs() to return std::span<u8>.

Fixed https://github.com/sumatrapdfreader/sumatrapdf/issues/1661
Another example of broken PDF that can be better handled if we
relax parsing of PDF (cmap).

Fixed https://github.com/sumatrapdfreader/sumatrapdf/issues/651
Managing focus is tricky.

2020-07-04 Sat

Improving WStr the same way as Str, while we're in this area.

make ByteWriter manage it's own buffer. In retrospect it's
better API than passing a buffer.

2020-07-03 Fri

De-templetizing WStr implementation. Currently it's a subclass
of Vec<WCHAR>.
Yes, duplication of code is bad but so are templates.
Reading code where you see T instead of WCHAR is significantly
worse.
The more stuff there is in .h files, the more code uses
templates, the longer are compilation times.
Templated code must be in .h file. 
While I can't fix long compilation times, I can try to keep
them as fast as possible.
Also an opportunity to make the API smaller.

Optimized str::Str on 64-bit by changing type of len/cap from
size_t to u32.

---

Optimizing Str. Turns out that after de-templatizing the code
became easier to understand and opportunities for optimizations turn up.
The optimizations are pretty nasty (re-using the same memory for
more than one purpse) but worth doing for such a fundamental type.

2020-06-29 Mon

- adding comments to Commands.h
- website: add 'Spread the word' section
- refactor: use DirIter in EngineImageDir::LoadImageDir()
